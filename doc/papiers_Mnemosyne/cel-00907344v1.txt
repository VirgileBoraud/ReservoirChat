Matplotlib tutorial Nicolas P. Rougier

To cite this version:

Nicolas P. Rougier. http://www.loria.fr/
rougier/teaching/matplotlib/matplotlib.html, 2012. ￿cel-00907344￿

Matplotlib

Doctoral.

tutorial.

Matplotlib

tutorial,

HAL Id: cel-00907344

https://cel.hal.science/cel-00907344

Submitted on 21 Nov 2013

HAL is a multi-disciplinary open access archive for the deposit and
dissemination of sci- entific research documents, whether they are pub-
lished or not. The documents may come from teaching and research
institutions in France or abroad, or from public or private research
centers.

L’archive ouverte pluridisciplinaire HAL, est destinée au dépôt et à la
diffusion de documents scientifiques de niveau recherche, publiés ou
non, émanant des établissements d’enseignement et de recherche français
ou étrangers, des laboratoires publics ou privés.

Matplotlib tutorial Nicolas P. Rougier - Euroscipy 2012 - Prace 2013 -
Euroscipy 2013

Introduction Simple plot Figures, Subplots, Axes and Ticks Other Types
of Plots Beyond this tutorial Quick references

Note There is now an accompanying numpy tutorial.

This tutorial is based on Mike Müller’s tutorial available from the
scipy lecture notes.

Sources are available here. Figures are in the ﬁgures directory and all
scripts are located in the scripts directory. Github repository is here

All code and material is licensed under a Creative Commons Attribution
3.0 United States License (CC-by)
http://creativecommons.org/licenses/by/3.0/us

Many thanks to Bill Wing and Christoph Deil for review and corrections.

Introductory slides on scientiﬁc visualization are here

Introduction

matplotlib is probably the single most used Python package for 2D-
graphics. It provides both a very quick way to visualize data from
Python and publication-quality ﬁgures in many formats. We are going to
explore matplotlib in interactive mode covering most common cases.

IPython and the pylab mode

IPython is an enhanced interactive Python shell that has lots of
interesting features including named inputs and outputs, access to shell
commands, improved debugging and many more. When we start it with the
command line argument -pylab (–pylab since IPython version 0.12), it
allows interactive matplotlib sessions that have Matlab/Mathematica-like
functionality.

pylab

pylab provides a procedural interface to the matplotlib object-oriented
plotting library. It is modeled closely after Matlab(TM). Therefore, the
majority of plotting commands in pylab have Matlab(TM) analogs with
similar arguments. Important commands are explained with interactive
examples.

Simple plot

In this section, we want to draw the cosine and sine functions on the
same plot. Starting from the default settings, we’ll enrich the ﬁgure
step by step to make it nicer.

First step is to get the data for the sine and cosine functions:

from pylab import *

X = np.linspace(-np.pi, np.pi, 256,endpoint=True) C,S = np.cos(X),
np.sin(X)

X is now a numpy array with 256 values ranging from -π to +π (included).
C is the cosine (256 values) and S is the sine (256 values).

To run the example, you can type them in an IPython interactive session

$ ipython –pylab This brings us to the IPython prompt:

IPython 0.13 – An enhanced Interactive Python. ? -> Introduction to
IPython’s features. %magic -> Information about IPython’s ‘magic’ %
functions.

help -> Python’s own help system. object? -> Details about ‘object’.
?object also works, ?? print s more.

Welcome to pylab, a matplotlib-based Python environment. For more
information, type ‘help(pylab)’.

or you can download each of the examples and run it using regular
python:

$ python exercice_1.py

You can get source for each step by clicking on the corresponding ﬁgure.

Using defaults

Documentation

plot tutorial plot() command

Matplotlib comes with a set of default settings that allow customizing
all kinds of properties. You can control the defaults of almost every
property in matplotlib: ﬁgure size and dpi, line width, color and style,
axes, axis and grid properties, text and font properties and so on.
While matplotlib defaults are rather good in most cases, you may want to
modify some properties for speciﬁc cases.

from pylab import *

X = np.linspace(-np.pi, np.pi, 256,endpoint=True) C,S = np.cos(X),
np.sin(X)

plot(X,C) plot(X,S)

show()

Instantiating defaults

Documentation

Customizing matplotlib

In the script below, we’ve instantiated (and commented) all the ﬁgure
settings that inﬂuence the appearance of the plot. The settings have
been explicitly set to their default values, but now you can
interactively play with the values to explore their affect (see Line
properties and Line styles below).

Import everything from matplotlib (numpy is accessible via ’n

p’ alias) from pylab import *

Create a new figure of size 8x6 points, using 80 dots per inc

h figure(figsize=(8,6), dpi=80)

Create a new subplot from a grid of 1x1

subplot(1,1,1)

X = np.linspace(-np.pi, np.pi, 256,endpoint=True) C,S = np.cos(X),
np.sin(X)

Plot cosine using blue color with a continuous line of width

1 (pixels) plot(X, C, color=“blue”, linewidth=1.0, linestyle=“-”)

Plot sine using green color with a continuous line of width 1

(pixels) plot(X, S, color=“green”, linewidth=1.0, linestyle=“-”)

Set x limits

xlim(-4.0,4.0)

Set x ticks

xticks(np.linspace(-4,4,9,endpoint=True))

Set y limits

ylim(-1.0,1.0)

Set y ticks

yticks(np.linspace(-1,1,5,endpoint=True))

Save figure using 72 dots per inch

savefig(“exercice_2.png”,dpi=72)

Show result on screen

show()

Changing colors and line widths

Documentation Controlling line properties Line API

First step, we want to have the cosine in blue and the sine in red and a
slighty thicker line for both of them. We’ll also slightly alter the
ﬁgure size to make it more horizontal.

… figure(figsize=(10,6), dpi=80) plot(X, C, color=“blue”, linewidth=2.5,
linestyle=“-”) plot(X, S, color=“red”, linewidth=2.5, linestyle=“-”) …

Setting limits

Documentation

xlim() command ylim() command

Current limits of the ﬁgure are a bit too tight and we want to make some
space in order to clearly see all data points.

… xlim(X.min()*1.1, X.max()*1.1) ylim(C.min()*1.1, C.max()*1.1) …

Setting ticks

Documentation

xticks() command yticks() command Tick container Tick locating and
formatting

Current ticks are not ideal because they do not show the interesting
values (+/-π,+/-π/2) for sine and cosine. We’ll change them such that
they show only these values.

… xticks( [-np.pi, -np.pi/2, 0, np.pi/2, np.pi]) yticks([-1, 0, +1]) …

Setting tick labels

Documentation Working with text xticks() command

Ticks are now properly placed but their label is not very explicit. We
could guess that 3.142 is π but it would be better to make it explicit.

yticks() command set_xticklabels() set_yticklabels()

When we set tick values, we can also provide a corresponding label in
the second argument list. Note that we’ll use latex to allow for nice
rendering of the label.

… xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi], [r’ − π‘, r’ − π/2‘,
r’0‘, r’ + π/2‘, r’ + π’] )

yticks([-1, 0, +1], [r’ − 1‘, r’0‘, r’ + 1’]) …

Moving spines

Documentation Spines Axis container Transformations tutorial

Spines are the lines connecting the axis tick marks and noting the
boundaries of the data area. They can be placed at arbitrary positions
and until now, they were on the border of the axis. We’ll change that
since we want to have them in the middle. Since there are four of them

(top/bottom/left/right), we’ll discard the top and right by setting
their color to none and we’ll move the bottom and left ones to
coordinate 0 in data space coordinates.

… ax = gca() ax.spines[‘right’].set_color(‘none’)
ax.spines[‘top’].set_color(‘none’) ax.xaxis.set_ticks_position(‘bottom’)
ax.spines[‘bottom’].set_position((‘data’,0))
ax.yaxis.set_ticks_position(‘left’)
ax.spines[‘left’].set_position((‘data’,0)) …

Adding a legend

Documentation Legend guide legend() command Legend API

Let’s add a legend in the upper left corner. This only requires adding
the keyword argument label (that will be used in the legend box) to the
plot commands.

… plot(X, C, color=“blue”, linewidth=2.5, linestyle=“-”, label=“c
osine”) plot(X, S, color=“red”, linewidth=2.5, linestyle=“-”, label=“s
ine”)

legend(loc=‘upper left’) …

Annotate some points

Documentation

Let’s annotate some interesting points using the annotate command.

Annotating axis

annotate() command

We chose the 2π/3 value and we want to annotate both the sine and the
cosine. We’ll ﬁrst draw a marker on the curve as well as a straight
dotted line. Then, we’ll use the annotate command to display some text
with an arrow.

…

t = 2*np.pi/3 plot([t,t],[0,np.cos(t)], color =‘blue’, linewidth=2.5,
linesty le=“–”) scatter([t,],[np.cos(t),], 50, color =‘blue’)

annotate(r’$\sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$‘, xy=(t,
np.sin(t)), xycoords=’data’, xytext=(+10, +30), textcoords=‘offset
points’, fontsiz e=16, arrowprops=dict(arrowstyle=“->”,
connectionstyle=“arc3 ,rad=.2”))

plot([t,t],[0,np.sin(t)], color =‘red’, linewidth=2.5, linestyl e=“–”)
scatter([t,],[np.sin(t),], 50, color =‘red’)

annotate(r’$\cos(\frac{2\pi}{3})=-\frac{1}{2}$‘, xy=(t, np.cos(t)),
xycoords=’data’, xytext=(-90, -50), textcoords=‘offset points’, fontsiz
e=16, arrowprops=dict(arrowstyle=“->”, connectionstyle=“arc3 ,rad=.2”))
…

Devil is in the details

Documentation

Artists BBox

The tick labels are now hardly visible because of the blue and red
lines. We can make them bigger and we can also adjust their properties
such that they’ll be rendered on a semi-transparent white background.
This will allow us to see both the data and the labels.

…

f o r

l a b e l

i n

a x . g e t _ x t icklabels() + ax.get_yticklabels():
label.set_fontsize(16) label.set_bbox(dict(facecolor=‘white’,
edgecolor=‘None’, al pha=0.65 )) …

Figures, Subplots, Axes and Ticks

So far we have used implicit ﬁgure and axes creation. This is handy for
fast plots. We can have more control over the display using ﬁgure,
subplot, and axes explicitly. A ﬁgure in matplotlib means the whole
window in the user interface. Within this ﬁgure there can be subplots.
While subplot positions the plots in a regular grid, axes allows free
placement within the ﬁgure. Both can be useful depending on your
intention. We’ve already worked with ﬁgures and subplots without
explicitly calling them. When we call plot, matplotlib calls gca() to
get the current axes and gca in turn calls gcf() to get the current
ﬁgure. If there is none it calls ﬁgure() to make one, strictly speaking,
to make a subplot(111). Let’s look at the details.

Figures

A ﬁgure is the windows in the GUI that has “Figure #” as title. Figures
are numbered starting from 1 as opposed to the normal Python way
starting from 0. This is clearly MATLAB-style. There are several
parameters that determine what the ﬁgure looks like:

Argument Default 1 num ﬁgure.ﬁgsize ﬁgsize ﬁgure.dpi dpi facecolor
ﬁgure.facecolor edgecolor ﬁgure.edgecolor

frameon

True

Description number of ﬁgure ﬁgure size in in inches (width, height)
resolution in dots per inch color of the drawing background color of
edge around the drawing background draw ﬁgure frame or not

The defaults can be speciﬁed in the resource ﬁle and will be used most
of the time. Only the number of the ﬁgure is frequently changed.

When you work with the GUI you can close a ﬁgure by clicking on the x in
the upper right corner. But you can close a ﬁgure programmatically by
calling close. Depending on the argument it closes (1) the current ﬁgure
(no argument), (2) a speciﬁc ﬁgure (ﬁgure number or ﬁgure instance as
argument), or (3) all ﬁgures (all as argument).

As with other objects, you can set ﬁgure properties also setp or with
the set_something methods.

Subplots

With subplot you can arrange plots in a regular grid. You need to
specify the number of rows and columns and the number of the plot. Note
that the gridspec command is a more powerful alternative.



Axes

Axes are very similar to subplots but allow placement of plots at any
location in the ﬁgure. So if we want to put a smaller plot inside a
bigger one we do so with axes.

Ticks

Well formatted ticks are an important part of publishing-ready ﬁgures.
Matplotlib provides a totally conﬁgurable system for ticks. There are
tick locators to specify where ticks should appear and tick formatters
to give ticks the appearance you want. Major and minor ticks can be

located and formatted independently from each other. Per default minor
ticks are not shown, i.e. there is only an empty list for them because
it is as NullLocator (see below).

Tick Locators

There are several locators for different kind of requirements:

Class

NullLocator

Description No ticks.

IndexLocator

Place a tick on every multiple of some base number of points plotted.

FixedLocator

Tick locations are ﬁxed.

LinearLocator Determine the tick locations.

MultipleLocatorSet a tick on every integer that is multiple of some
base.

AutoLocator

Select no more than n intervals at nice locations.

LogLocator

Determine the tick locations for log axes.

All of these locators derive from the base class
matplotlib.ticker.Locator. You can make your own locator deriving from
it. Handling dates as ticks can be especially tricky. Therefore,
matplotlib provides special locators in matplotlib.dates.

Other Types of Plots









Hints You need to use the ﬁll_between command.

Regular Plots

Starting from the code below, try to reproduce the graphic on the right
taking care of ﬁlled areas:

from pylab import *

n = 256 X = np.linspace(-n p.pi,np.pi,n,endpo int=True) Y = np.sin(2*X)

Hints Color is given by angle of (X,Y).

plot (X, Y+1, color=‘blue’, alpha=1.00) plot (X, Y-1, color=‘blue’,
alpha=1.00) show()

Click on ﬁgure for solution.

Scatter Plots

Starting from the code below, try to reproduce the graphic on the right
taking care of marker size, color and transparency.

from pylab import *

n = 1024 X = np.random.norm al(0,1,n) Y = np.random.normal(0,1,n)

scatter(X,Y) show()

Click on ﬁgure for solution.

Hints You need to take care of text alignment.

Bar Plots

Starting from the code below, try to reproduce the graphic on the right
by adding labels for red bars.

from pylab import *

n = 12 X = np.arange(n) Y1 = (1-X/float(n) ) * np.random.unif
orm(0.5,1.0,n) Y2 = (1-X/float(n)) * np.random.uniform(0.5,1.0,n)

bar(X, +Y1, facecolor=‘#9999ff’, edgecolor=‘white’) bar(X, -Y2,
facecolor=‘#ff9999’, edgecolor=‘white’)

for x,y in zip(X,Y1): text(x+0.4, y+0.05, ‘%.2f’ % y, ha=‘center’, va=
‘bottom’)

Hints You need to use the clabel

command.

ylim(-1.25,+1.25) show()

Click on ﬁgure for solution.

Contour Plots

Starting from the code below, try to reproduce the graphic on the right
taking care of the colormap (see Colormaps below).

from pylab import *

def f(x,y): return (1-x/2+x**5+y**3) *np.exp(-x**2-y**2)

n = 256 x = np.linspace(-3,3,n) y = np.linspace(-3,3,n) X,Y =
np.meshgrid(x,y)

contourf(X, Y, f(X,Y), 8, alpha=.75, cmap=‘jet’)

C = contour(X, Y, f(X,Y), 8, colors=‘black’, linewidth=.5) show()

Click on ﬁgure for solution.

Hints You need to take care of the origin of the image in the

imshow command and use a colorbar

Imshow

Starting from the code below, try to reproduce the graphic on the right
taking care of colormap, image interpolation and origin.

from pylab import *

def f(x,y): return (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)

n = 10 x = np.linspace(-3,3,4*n) y = np.linspace(-3,3,3*n) X,Y =
np.meshgrid(x,y) imshow(f(X,Y)), show()

Click on ﬁgure for solution.

Hints You need to modify Z.

Pie Charts

Starting from the code below, try to reproduce the graphic on the right
taking care of colors and slices size.

from pylab import *

n = 20 Z = np.random.unif orm(0,1,n) pie(Z), show()

Click on ﬁgure for solution.

Hints You need to draw arrows twice.

Quiver Plots

Starting from the code above, try to reproduce the graphic on the right
taking care of colors and orientations.

from pylab import *

n = 8 X,Y = np.mgrid[0:n ,0:n] quiver(X,Y), show( )

Click on ﬁgure for solution.

Grids

Starting from the code below, try to reproduce the graphic on the right
taking care of line styles.

from pylab import *

axes = gca() axes.set_xlim(0,4) axes.set_ylim(0,3) axes.set_xticklabe
ls([]) axes.set_yticklabels([])

show()

Click on ﬁgure for solution.

Multi Plots

Hints

You can use several subplots

with different partition.

Hints You only need to modify the axes line

Starting from the code below, try to reproduce the graphic on the right.

from pylab import *

subplot(2,2,1) subplot(2,2,3) subplot(2,2,4)

show()

Click on ﬁgure for solution.

Polar Axis

Starting from the code below, try to reproduce the graphic on the right.

from pylab import *

axes([0,0,1,1])

N = 20 theta = np.arange( 0.0, 2*np.pi, 2*np .pi/N) radii = 10*np.rand
om.rand(N) width = np.pi/4*np.random.rand(N) bars = bar(theta, radii,
width=width, bottom=0.0)

for r,bar in zip(radii, bars): bar.set_facecolor( cm.jet(r/10.))
bar.set_alpha(0.5)

show()

Click on ﬁgure for solution.

3D Plots

Starting from the code below, try to reproduce the graphic on the right.

from pylab import *

Hints You need to use contourf

from mpl_toolkits. mplot3d import Axe s3D

fig = figure() ax = Axes3D(fig) X = np.arange(-4, 4, 0.25) Y =
np.arange(-4, 4, 0.25) X, Y = np.meshgrid (X, Y) R = np.sqrt(X**2 +
Y**2) Z = np.sin(R)

ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=‘hot’)

show()

Click on ﬁgure for solution.

Hints Have a look at the matplotlib

logo.

Text

Try to do the same from scratch !

Click on ﬁgure for solution.

Beyond this tutorial

Matplotlib beneﬁts from extensive documentation as well as a large
community of users and developpers. Here are some links of interest:

Tutorials

Pyplot tutorial

Introduction Controlling line properties Working with multiple ﬁgures
and axes Working with text

Image tutorial

Startup commands Importing image data into Numpy arrays Plotting numpy
arrays as images

Text tutorial

Text introduction Basic text commands Text properties and layout Writing
mathematical expressions Text rendering With LaTeX Annotating text

Artist tutorial

Introduction Customizing your objects Object containers Figure container
Axes container Axis containers Tick containers

Path tutorial

Introduction Bézier example Compound paths

Transforms tutorial

Introduction Data coordinates Axes coordinates Blended transformations
Using offset transforms to create a shadow effect The transformation
pipeline

Matplotlib documentation

User guide FAQ

Installation Usage How-To Troubleshooting Environment Variables

Screenshots

Code documentation

The code is fairly well documented and you can quickly access a speciﬁc
command from within a python session:

      from pylab import * help(plot) Help on function plot in module
      matplotlib.pyplot:

plot(*args, **kwargs) Plot lines and/or markers to the
:class:~matplotlib.axes.Axes. *args* is a variable length argument,
allowing for multiple *x*, *y* pairs with an optional format string. For
example, each of the following is legal::

plot(x, y) # plot x and y using default line sty le and color plot(x, y,
‘bo’) # plot x and y using blue circle mark ers plot(y) # plot y using x
as index array 0..N- 1 plot(y, ‘r+’) # ditto, but with red plusses

If *x* and/or *y* is 2-dimensional, then the corresponding c olumns will
be plotted. …

Galleries

The matplotlib gallery is also incredibly useful when you search how to
render a given graphic. Each example comes with its source.

A smaller gallery is also available here.

Mailing lists

Finally, there is a user mailing list where you can ask for help and a
developers mailing list that is more technical.

Quick references

Here is a set of tables that show main properties and styles.

Line properties

Property

alpha (or a)

antialiased

color (or c)

linestyle (or ls)

Description

Appearance

alpha transparency on 0- 1 scale True or False - use antialised
rendering matplotlib color arg see Line properties

linewidth (or lw) ﬂoat, the line

solid_capstyle

solid_joinstyle

dash_capstyle

dash_joinstyle

marker

width in points Cap style for solid lines Join style for solid lines Cap
style for dashes Join style for dashes see Markers

markeredgewidth (mew) markeredgecolor (mec) markerfacecolor (mfc)
markersize (ms)

line width around the marker symbol edge color if a marker is used face
color if a marker is used size of the marker in points

Line styles

Symbol Description

Appearance

-   

–

-.

:

.

,

o

^

v

<

s

-   

x

D

d

1

2

3

4

h

H

p

_

solid line

dashed line dash-dot line dotted line

points

pixels circle

triangle up triangle down

triangle left

triangle right

square

plus

cross

diamond

thin diamond tripod down

tripod up tripod left

tripod right hexagon

rotated hexagon pentagon

vertical line horizontal line

Appearance

Markers

Symbol 0 1 2 3 4 5

Description tick left tick right tick up tick down caret left caret
right

6

7

o

D

h

H

_

1

2

3

4

8

p

^

v

<

d

,

-   

.

s

*

caret up

caret down

circle

diamond hexagon 1

hexagon 2 horizontal line

tripod down

tripod up

tripod left tripod right

octagon pentagon

triangle up

triangle down triangle left

triangle right thin diamond pixel

plus point

square star

vertical line

x

cross r’$\sqrt{2}$’any latex expression

Colormaps

All colormaps can be reversed by appending _r. For instance, gray_r is
the reverse of gray.

If you want to know more about colormaps, checks Documenting the
matplotlib colormaps.

Base

Name Appearance

autumn bone cool copper ﬂag gray hot hsv jet pink prism spectral spring
summer winter

GIST

Name

Appearance

gist_earth gist_gray gist_heat gist_ncar

gist_rainbow

gist_stern

gist_yarg

Sequential

Name Appearance

BrBG PiYG PRGn

PuOr RdBu RdGy RdYlBu RdYlGn Spectral

Diverging

Name Appearance Blues

BuGn BuPu GnBu Greens Greys Oranges OrRd PuBu PuBuGn PuRd Purples RdPu

Reds

YlGn YlGnBu

YlOrBr

YlOrRd

Qualitative

Name Appearance

Accent Dark2 Paired Pastel1

Pastel2 Set1 Set2 Set3

Miscellaneous

Appearance

Name afmhot binary brg bwr coolwarm CMRmap cubehelix gnuplot gnuplot2

ocean

rainbow seismic

terrain


